<?php

/**
 * @package CRM
 * @copyright CiviCRM LLC https://civicrm.org/licensing
 *
 * Generated from ca.sdda.trialadmin/xml/schema/CRM/Trialadmin/TrialComponents.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:4717acd66314690150cda7b6f05a7a73)
 */
use CRM_Trialadmin_ExtensionUtil as E;

/**
 * Database access object for the TrialComponents entity.
 */
class CRM_Trialadmin_DAO_TrialComponents extends CRM_Core_DAO {
  const EXT = E::LONG_NAME;
  const TABLE_ADDED = '';

  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  public static $_tableName = 'civicrm_trial_components';

  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var bool
   */
  public static $_log = TRUE;

  /**
   * Unique TrialComponents ID
   *
   * @var int
   */
  public $id;

  /**
   * FK to Event
   *
   * @var int
   */
  public $event_id;

  /**
   * Trial Number
   *
   * @var int
   */
  public $trial_number;

  /**
   * Date of this Trial Event
   *
   * @var datetime
   */
  public $trial_date;

  /**
   * Judge
   *
   * @var int
   */
  public $judge;

  /**
   * Started components
   *
   * @var text
   */
  public $started_components;

  /**
   * advanced components
   *
   * @var text
   */
  public $advanced_components;

  /**
   * Excellent components
   *
   * @var text
   */
  public $excellent_components;

  /**
   * Started components
   *
   * @var int
   */
  public $elite_offered;

  /**
   * Games components
   *
   * @var text
   */
  public $games_components;

  /**
   * Class constructor.
   */
  public function __construct() {
    $this->__table = 'civicrm_trial_components';
    parent::__construct();
  }

  /**
   * Returns localized title of this entity.
   *
   * @param bool $plural
   *   Whether to return the plural version of the title.
   */
  public static function getEntityTitle($plural = FALSE) {
    return $plural ? E::ts('Trial Componentses') : E::ts('Trial Components');
  }

  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  public static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'event_id', 'civicrm_event', 'id');
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName(), 'judge', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }

  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  public static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = [
        'id' => [
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('Unique TrialComponents ID'),
          'required' => TRUE,
          'where' => 'civicrm_trial_components.id',
          'table_name' => 'civicrm_trial_components',
          'entity' => 'TrialComponents',
          'bao' => 'CRM_Trialadmin_DAO_TrialComponents',
          'localizable' => 0,
          'html' => [
            'type' => 'Number',
          ],
          'readonly' => TRUE,
          'add' => NULL,
        ],
        'event_id' => [
          'name' => 'event_id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => E::ts('FK to Event'),
          'where' => 'civicrm_trial_components.event_id',
          'table_name' => 'civicrm_trial_components',
          'entity' => 'TrialComponents',
          'bao' => 'CRM_Trialadmin_DAO_TrialComponents',
          'localizable' => 0,
          'FKClassName' => 'CRM_Event_DAO_Event',
          'add' => NULL,
        ],
        'trial_number' => [
          'name' => 'trial_number',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Trial Number'),
          'description' => E::ts('Trial Number'),
          'where' => 'civicrm_trial_components.trial_number',
          'table_name' => 'civicrm_trial_components',
          'entity' => 'TrialComponents',
          'bao' => 'CRM_Trialadmin_DAO_TrialComponents',
          'localizable' => 0,
          'html' => [
            'type' => 'int unsigned',
          ],
          'add' => NULL,
        ],
        'trial_date' => [
          'name' => 'trial_date',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => E::ts('Trial Date'),
          'description' => E::ts('Date of this Trial Event'),
          'where' => 'civicrm_trial_components.trial_date',
          'table_name' => 'civicrm_trial_components',
          'entity' => 'TrialComponents',
          'bao' => 'CRM_Trialadmin_DAO_TrialComponents',
          'localizable' => 0,
          'html' => [
            'type' => 'datetime',
          ],
          'add' => NULL,
        ],
        'judge' => [
          'name' => 'judge',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Judge'),
          'description' => E::ts('Judge'),
          'where' => 'civicrm_trial_components.judge',
          'table_name' => 'civicrm_trial_components',
          'entity' => 'TrialComponents',
          'bao' => 'CRM_Trialadmin_DAO_TrialComponents',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
          'html' => [
            'type' => 'select',
          ],
          'pseudoconstant' => [
            'table' => 'civicrm_contact',
            'keyColumn' => 'id',
            'labelColumn' => 'legal_name',
            'condition' => 'contact_type = "Individual"',
          ],
          'add' => NULL,
        ],
        'started_components' => [
          'name' => 'started_components',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Started Components'),
          'description' => E::ts('Started components'),
          'where' => 'civicrm_trial_components.started_components',
          'table_name' => 'civicrm_trial_components',
          'entity' => 'TrialComponents',
          'bao' => 'CRM_Trialadmin_DAO_TrialComponents',
          'localizable' => 0,
          'html' => [
            'type' => 'text',
          ],
          'add' => NULL,
        ],
        'advanced_components' => [
          'name' => 'advanced_components',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Advanced Components'),
          'description' => E::ts('advanced components'),
          'where' => 'civicrm_trial_components.advanced_components',
          'table_name' => 'civicrm_trial_components',
          'entity' => 'TrialComponents',
          'bao' => 'CRM_Trialadmin_DAO_TrialComponents',
          'localizable' => 0,
          'html' => [
            'type' => 'text',
          ],
          'add' => NULL,
        ],
        'excellent_components' => [
          'name' => 'excellent_components',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Excellent Components'),
          'description' => E::ts('Excellent components'),
          'where' => 'civicrm_trial_components.excellent_components',
          'table_name' => 'civicrm_trial_components',
          'entity' => 'TrialComponents',
          'bao' => 'CRM_Trialadmin_DAO_TrialComponents',
          'localizable' => 0,
          'html' => [
            'type' => 'text',
          ],
          'add' => NULL,
        ],
        'elite_offered' => [
          'name' => 'elite_offered',
          'type' => CRM_Utils_Type::T_INT,
          'title' => E::ts('Elite Offered'),
          'description' => E::ts('Started components'),
          'where' => 'civicrm_trial_components.elite_offered',
          'table_name' => 'civicrm_trial_components',
          'entity' => 'TrialComponents',
          'bao' => 'CRM_Trialadmin_DAO_TrialComponents',
          'localizable' => 0,
          'html' => [
            'type' => 'checkbox',
          ],
          'add' => NULL,
        ],
        'games_components' => [
          'name' => 'games_components',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => E::ts('Games Components'),
          'description' => E::ts('Games components'),
          'where' => 'civicrm_trial_components.games_components',
          'table_name' => 'civicrm_trial_components',
          'entity' => 'TrialComponents',
          'bao' => 'CRM_Trialadmin_DAO_TrialComponents',
          'localizable' => 0,
          'html' => [
            'type' => 'text',
          ],
          'add' => NULL,
        ],
      ];
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }

  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  public static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }

  /**
   * Returns the names of this table
   *
   * @return string
   */
  public static function getTableName() {
    return self::$_tableName;
  }

  /**
   * Returns if this table needs to be logged
   *
   * @return bool
   */
  public function getLog() {
    return self::$_log;
  }

  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &import($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'trial_components', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  public static function &export($prefix = FALSE) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'trial_components', $prefix, []);
    return $r;
  }

  /**
   * Returns the list of indices
   *
   * @param bool $localize
   *
   * @return array
   */
  public static function indices($localize = TRUE) {
    $indices = [];
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }

}
